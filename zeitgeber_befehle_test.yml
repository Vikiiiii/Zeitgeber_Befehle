esphome:
  name: viki
  libraries:
    - Max44009-master
  includes:
    - myUARTcomponent.h
    - ESP32Time.cpp
    - ESP32Time.h

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: arduino

logger:
  level: DEBUG
  
globals:
  - id: hour_time #Hour of wake up time
    type: int
    initial_value: '12'
  - id: minute_time #Minute of wake up time
    type: int
    initial_value: '20'
  - id: volume_abs
    type: int
    initial_value: '20'  
  - id: track_number #Track that is set
    type: int
    initial_value: '8'
  - id: sound_state #Sound on/off
    type: int
    initial_value: '1'
  - id: wakeup_state #Alarm on/off
    type: int
    initial_value: '1'
  - id: brightness #Maximum brightness
    type: int
    initial_value: '10'
  - id: hour_time_dawn #Hour Dawn time
    type: int
    initial_value: "0" 
  - id: minute_time_dawn #Minute Dawn time
    type: int
    initial_value: "50"
  - id: scene_state #Current scene
    type: int
    initial_value: '2'

ota:
  password: "connect"

wifi:
  ssid: "UPC99A4F68" #UPC99A4F68
  password: "ezesaMayxe6p" #ezesaMayxe6p

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Viki Fallback Hotspot"
    password: "Wal6T71UYbnD"

uart: 
  - id: myuart_data
    tx_pin: GPIO16 #Data Transmit 
    rx_pin: GPIO17 #Data Recieve 
    baud_rate: 9600
    debug:  
      direction: TX

binary_sensor:      
  - platform: gpio #Button for allowing to change time and change it
    pin: 
      number: GPIO14
      mode: INPUT_PULLUP
      inverted: true
    id: zeit_verstellen
    on_press:
      then:
      - uart.write: 
            id: myuart_data
            data: "{set-config:1,17,15,18,15,100,1,10,30}\r\n"
 
text_sensor:
- platform: custom
  lambda: |-
    auto my_custom_sensor = new UartReadLineSensor(id(myuart_data));
    App.register_component(my_custom_sensor);
    return {my_custom_sensor};
  
  text_sensors:
    id: uart_readline

script:
  - id: epoch_script
    then:
      - lambda: |-
          char buf[25];
          snprintf(buf,25, "{epoch:%lu}\r\n", sntp_time->now().timestamp);
          id(myuart_data).write_str(buf);

  - id: setconfig_script #fÃ¼r set config
    then:
      - lambda: |-
          char send[45] = {0}; 
          snprintf(send,45,"{set-config:%d,%d,%d,%d,%d,%d,%d,%d,%d}\r\n", id(wakeup_state), id(hour_time_dawn), id(minute_time_dawn), id(hour_time), id(minute_time),id(brightness), id(sound_state), id(track_number), id(volume_abs));
          id(myuart_data).write_str(send); 

  - id: scene_script  
    then:
        - lambda: |- 
            char send[17] = {0};
            snprintf(send,17,"{set-s:%d}\r\n", id(scene_state));
            id(myuart_data).write_str(send);

  - id: status_script  
    then:
        - lambda: |- 
            char send[20] = {0};
            snprintf(send,20,"{status:%d,%d,%d,%d}\r\n", id(scene_state), id(volume_abs), id(track_number), id(sound_state) );
            id(myuart_data).write_str(send);            
  

time:
 - platform: sntp
   id: sntp_time
   on_time:
      - seconds: /10
        then:
        #  - script.execute: config_script # nur zum test


switch:
  - platform: template
    name: setconfig_switch # set-config
    optimistic: true
    lambda: |-
        std::string uart_recieve = id(uart_readline).state.c_str();
        int position_1;
        int position_2;
        int laenge;
        if(strncmp(id(uart_readline).state.c_str(), "{set-config:",12) == 0 && uart_recieve.length() >= 27 ) //Set command, read command and write values to variableds 
        {

          uart_recieve.erase(remove(uart_recieve.begin(), uart_recieve.end(), '}'), uart_recieve.end());
          uart_recieve = uart_recieve.c_str()+10;

          //Wakeup enable
          std::string wakeup_s = uart_recieve.substr(uart_recieve.find(":")+1, uart_recieve.find(",")-2);
          uart_recieve = uart_recieve.c_str() +2;
          id(wakeup_state) = atoi(wakeup_s.c_str());

          //Dawn Hour
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          
          std::string hour_time_dawn_s = uart_recieve.substr(position_1+1, laenge-1);
          uart_recieve = uart_recieve.c_str()+laenge;
          id(hour_time_dawn) = atoi(hour_time_dawn_s.c_str());

          //Dawn Minute
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;

          std::string minute_time_dawn_s = uart_recieve.substr(position_1+1, laenge-1);          
          id(minute_time_dawn) = atoi(minute_time_dawn_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;

          //Wakeup time Hour
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string hour_time_s = uart_recieve.substr(position_1+1, laenge-1); 
          id(hour_time) = atoi(hour_time_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;
          

          //Wakeup time Minute
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string minute_time_s =uart_recieve.substr(position_1+1, laenge-1); 
          id(minute_time) = atoi(minute_time_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;

          //Brightness
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string brightness_s = uart_recieve.substr(position_1+1, laenge-1);;
          id(brightness) = atoi(brightness_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;

          //Sound on/off
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string sound_s = uart_recieve.substr(position_1+1, laenge-1);;
          id(sound_state) = atoi(sound_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;

          //Track number
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string track_s = uart_recieve.substr(position_1+1, laenge-1);;
          id(track_number) = atoi(track_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;


          //Volume
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string volume_s = uart_recieve.substr(position_1+1, laenge-1);;
          uart_recieve = uart_recieve.c_str()+laenge;

          id(volume_abs) = atoi(volume_s.c_str());

          char send[45]; 
          snprintf(send,45,"{config:%d,%d,%d,%d,%d,%d,%d,%d,%d}\r\n", id(wakeup_state), id(hour_time_dawn), id(minute_time_dawn), id(hour_time), id(minute_time),id(brightness), id(sound_state), id(track_number), id(volume_abs));
          id(myuart_data).write_str(send);
          return true;

        }

        else
        {
          return false;
        }
    on_turn_on:
      lambda: |-
        id(uart_readline).state.clear();
  - platform: template
    name: config_switch # config-lesen
    optimistic: true
    lambda: |-
        std::string uart_recieve = id(uart_readline).state. c_str();
        int position_1;
        int position_2;
        int laenge;
        if(strncmp(id(uart_readline).state.c_str(), "{config:",8) == 0 && uart_recieve.length() >= 27 ) //Set command, read command and write values to variableds 
        {
          uart_recieve.erase(remove(uart_recieve.begin(), uart_recieve.end(), '}'), uart_recieve.end());
          uart_recieve = uart_recieve.c_str()+6;

          //Wakeup enable
          std::string wakeup_s = uart_recieve.substr(uart_recieve.find(":")+1, uart_recieve.find(",")-2);
          uart_recieve = uart_recieve.c_str() +2;
          id(wakeup_state) = atoi(wakeup_s.c_str());

          //Dawn Hour
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          
          std::string hour_time_dawn_s = uart_recieve.substr(position_1+1, laenge-1);
          uart_recieve = uart_recieve.c_str()+laenge;
          id(hour_time_dawn) = atoi(hour_time_dawn_s.c_str());

          //Dawn Minute
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;

          std::string minute_time_dawn_s = uart_recieve.substr(position_1+1, laenge-1);          
          id(minute_time_dawn) = atoi(minute_time_dawn_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;


          //Wakeup time Hour
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string hour_time_s = uart_recieve.substr(position_1+1, laenge-1); 
          id(hour_time) = atoi(hour_time_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;
          

          //Wakeup time Minute
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string minute_time_s =uart_recieve.substr(position_1+1, laenge-1); 
          id(minute_time) = atoi(minute_time_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;

          //Brightness
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string brightness_s = uart_recieve.substr(position_1+1, laenge-1);;
          id(brightness) = atoi(brightness_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;

          //Sound on/off
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string sound_s = uart_recieve.substr(position_1+1, laenge-1);;
          id(sound_state) = atoi(sound_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;

          //Track number
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string track_s = uart_recieve.substr(position_1+1, laenge-1);;
          id(track_number) = atoi(track_s.c_str());
          uart_recieve = uart_recieve.c_str()+laenge;


          //Volume
          position_1 = uart_recieve.find(",");
          position_2 = uart_recieve.find(",",position_1+1);
          laenge = position_2-position_1;
          std::string volume_s = uart_recieve.substr(position_1+1, laenge-1);;
          uart_recieve = uart_recieve.c_str()+laenge;

          id(volume_abs) = atoi(volume_s.c_str());
          return true;

        }

        else
        {
          return false;
        }
    on_turn_on:
      lambda: |-
        id(uart_readline).state.clear();

  - platform: template
    name: scene_switch
    optimistic: true
    lambda: |-
        std::string uart_recieve = id(uart_readline).state. c_str();
        if(strncmp(id(uart_readline).state.c_str(),"{set-s:",7) == 0 && uart_recieve.length() <= 10 )
        {
          const char* scene_state_modified = id(uart_readline).state.c_str()+7;
          int scene_state_changed = atoi(scene_state_modified);
          id(scene_state) = scene_state_changed;
          return true;
        }

        else
        {
          return false;
        }
    on_turn_on:
      lambda: |-
        id(uart_readline).state.clear();
  - platform: template
    name: getwakeup_switch
    optimistic: true
    lambda: |-
      std::string uart_recieve = id(uart_readline).state. c_str();
      if(strncmp(id(uart_readline).state.c_str(),"get-wakeup",10) == 0 && uart_recieve.length() == 10 && uart_recieve.c_str()[9] == 'p')
      {
        return true;
      }

      else
        {
          return false;
        }
    on_turn_on:
    - script.execute: setconfig_script
    - lambda: |-
        id(uart_readline).state.clear();
  - platform: template
    name: getstatus_switch
    optimistic: true
    lambda: |-
        std::string uart_recieve = id(uart_readline).state. c_str();
        if(strncmp(id(uart_readline).state.c_str(),"get-status",10) == 0 && uart_recieve.length() == 10 && uart_recieve.c_str()[9] == 's' )
        {  
          return true;
        }

        else
        {
          return false;
        }
    on_turn_on:
    - script.execute: status_script
    - lambda: |-
        id(uart_readline).state.clear();
  - platform: template
    name: getepoch_switch
    optimistic: true
    lambda: |-
        std::string uart_recieve = id(uart_readline).state. c_str();
        if(strncmp(id(uart_readline).state.c_str(),"get-epoch",9) == 0 && uart_recieve.length() == 9 && uart_recieve.c_str()[8] == 'h' )
        {  
          return true;
        }

        else
        {
          return false;
        }
    on_turn_on:
    - script.execute: epoch_script
    - lambda: |-
        id(uart_readline).state.clear();
  - platform: template
    name: pause_switch
    optimistic: true
    lambda: |-
        std::string uart_recieve = id(uart_readline).state. c_str();
        if(strncmp(id(uart_readline).state.c_str(),"{pause",5) == 0 && uart_recieve.length() == 7)
        {  
          id(sound_state) = 0;
          return true;
        }

        else
        {
          return false;
        }
    on_turn_on:
    - lambda: |-
        id(uart_readline).state.clear();

  - platform: template
    name: play_switch
    optimistic: true
    lambda: |-
        std::string uart_recieve = id(uart_readline).state. c_str();
        if(strncmp(id(uart_readline).state.c_str(),"{play:",6) == 0 && uart_recieve.length() <= 9)
        {
          const char* play_modified = id(uart_readline).state.c_str()+6;
          id(track_number) = atoi(play_modified);
          id(sound_state) = 1;
          return true;
        }

        else
        {
          return false;
        }
    on_turn_on:
    - lambda: |-
        id(uart_readline).state.clear();
        
